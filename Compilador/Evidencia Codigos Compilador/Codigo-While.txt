Last login: Fri Jun  4 15:30:56 on ttys000
luisnunez.@MacBook-Air-de-Luis ~ % cd ejercicios
luisnunez.@MacBook-Air-de-Luis ejercicios % cd compilador
luisnunez.@MacBook-Air-de-Luis compilador % open do_while
The file /Users/luisnunez./Ejercicios/Compilador/do_while does not exist.
luisnunez.@MacBook-Air-de-Luis compilador % open do_while.c
luisnunez.@MacBook-Air-de-Luis compilador % ./ccompiler while.c  
Analizador Sintactico de ANSI C 2021 version 0.6



type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<main>
direct_declarator: direct_declarator '(' ')'
declarator: direct_declarator
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<i>
declarator: direct_declarator
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
initializer: assignment_expression	
init_declarator: declarator '=' initializerinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
i
declaration_list: declaration
primary_expression: IDENTIFIER
<i>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: relational_expression '<' shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
Variable: puts
	 Errror lexico: Not declared en linea: 11, columna: 14
luisnunez.@MacBook-Air-de-Luis compilador % ./ccompiler while.c
Analizador Sintactico de ANSI C 2021 version 0.6



type_specifier: VOID
declaration_specifiers: 
direct_declarator: IDENTIFIER<puts>
direct_declarator: direct_declarator '(' ')'
declarator: direct_declarator
init_declarator: declaratorinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
puts
external_declaration: declaration
translation_unit: external_declaration
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<main>
direct_declarator: direct_declarator '(' ')'
declarator: direct_declarator
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<i>
declarator: direct_declarator
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
initializer: assignment_expression	
init_declarator: declarator '=' initializerinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
i
declaration_list: declaration
primary_expression: IDENTIFIER
<i>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: relational_expression '<' shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
primary_expression: IDENTIFIER
<puts>
postfix_expression: primary_expression
Start of  the string
primary_expression: STRING_LITERAL
<"hola
">
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
argument_expression_list: assignment_expression
postfix_expression: postfix_expression '(' argument_expression_list ')'
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement
primary_expression: IDENTIFIER
<i>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: '='
primary_expression: IDENTIFIER
<i>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: additive_expression '+' multiplicative_expression
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement_list statement
compound_statement: '{' statement_list '}'
statement: compound_statement
iteration_statement: WHILE '(' expression ')' statement
statement: iteration_statement
statement_list: statement
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
jump_statement: RETURN expression ';'
statement: jump_statement
statement_list: statement_list statement
compound_statement: '{' declaration_list statement_list '}'
function_definition : declaration_specifiers declarator compound_statement
external_declaration: function_definition
translation_unit: external_declaration

Tabla de variables globales
Name
puts FUNC
main FUNC

Codigo intermedio: 

0: PROC main
1: i = 0
2: IF i < 3 GOTO 4
3: GOTO 9
4: PARAM @2
5: @3 = CALL puts, 1
6: @5 = i + 1
7: i = @5
8: GOTO 2
9: RETURN 0
10: ENDPROC main

luisnunez.@MacBook-Air-de-Luis compilador % 

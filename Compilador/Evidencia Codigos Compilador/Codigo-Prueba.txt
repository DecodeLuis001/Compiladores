Last login: Fri Jun  4 22:44:23 on console
luisnunez.@MacBook-Air-de-Luis Compilador % bison --defines ansic.y             
luisnunez.@MacBook-Air-de-Luis Compilador % flex ansic.l
luisnunez.@MacBook-Air-de-Luis Compilador % g++ -occompiler ansic.tab.c lex.yy.c
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
luisnunez.@MacBook-Air-de-Luis Compilador % ./ccompiler codigo.c
Analizador Sintactico de ANSI C 2021 version 0.6



type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<r>
declarator: direct_declarator
init_declarator: declaratorinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
r
external_declaration: declaration
translation_unit: external_declaration
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<g>
declarator: direct_declarator
init_declarator: declaratorinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
g
external_declaration: declaration
translation_unit: external_declaration
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<h>
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
constant_expression: conditional_expression
direct_declarator: direct_declarator '[' constant_expression ']'
declarator: direct_declarator
init_declarator: declaratorinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
h
external_declaration: declaration
translation_unit: external_declaration
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<printf>
direct_declarator: direct_declarator '(' ')'
declarator: direct_declarator
init_declarator: declaratorinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
printf
external_declaration: declaration
translation_unit: external_declaration
type_specifier: FLOAT
declaration_specifiers: 
direct_declarator: IDENTIFIER<myfunc>
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<a>
declarator: direct_declarator
parameter_declaration: declaration_specifiers declarator
parameter_list: parameter_declaration
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<b>
declarator: direct_declarator
parameter_declaration: declaration_specifiers declarator
parameter_list: parameter_list ',' parameter_declaration
parameter_type_list: parameter_list
direct_declarator: direct_declarator '(' parameter_type_list ')'
declarator: direct_declarator
primary_expression: IDENTIFIER
<a>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
primary_expression: IDENTIFIER
<b>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: multiplicative_expression '*' cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
jump_statement: RETURN expression ';'
statement: jump_statement
statement_list: statement
compound_statement: '{' statement_list '}'
function_definition : declaration_specifiers declarator compound_statement
external_declaration: function_definition
translation_unit: external_declaration
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<main>
direct_declarator: direct_declarator '(' ')'
declarator: direct_declarator
type_specifier: DOUBLE
declaration_specifiers: 
direct_declarator: IDENTIFIER<x>
declarator: direct_declarator
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
initializer: assignment_expression	
init_declarator: declarator '=' initializerinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
x
declaration_list: declaration
type_specifier: FLOAT
declaration_specifiers: 
direct_declarator: IDENTIFIER<y>
declarator: direct_declarator
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: multiplicative_expression '/' cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
initializer: assignment_expression	
init_declarator: declarator '=' initializerinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
y
declaration_list: declaration_list declaration
type_specifier: INT
declaration_specifiers: 
direct_declarator: IDENTIFIER<z>
declarator: direct_declarator
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: additive_expression '+' multiplicative_expression
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
initializer: assignment_expression	
init_declarator: declarator '=' initializerinit_declarator_list: init_declaratordeclaration: declaration_specifiers init_declarator_list ';'
Declaring Variable: 
z
declaration_list: declaration_list declaration
primary_expression: IDENTIFIER
<g>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: '='
primary_expression: IDENTIFIER
<z>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: additive_expression '+' multiplicative_expression
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement
primary_expression: IDENTIFIER
<g>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: '='
primary_expression: IDENTIFIER
<z>
postfix_expression: primary_expression
postfix_expression: postfix_expression INC_OP	
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement_list statement
primary_expression: IDENTIFIER
<g>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: '='
primary_expression: IDENTIFIER
<z>
postfix_expression: primary_expression
unary_expression: postfix_expression
unary_expression: DEC_OP unary_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement_list statement
primary_expression: IDENTIFIER
<g>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: '='
type_specifier: INT
specifier_qualifier_list: type_specifier
type_name: specifier_qualifier_list
unary_expression : SIZEOF '(' type_name ')'
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement_list statement
primary_expression: IDENTIFIER
<r>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: '='
primary_expression: IDENTIFIER
<x>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: multiplicative_expression '*' cast_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: multiplicative_expression '/' cast_expression
additive_expression: additive_expression '-' multiplicative_expression
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement_list statement
primary_expression: IDENTIFIER
<y>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: MUL_ASSIGN
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement_list statement
primary_expression: IDENTIFIER
<r>
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: relational_expression '>' shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
primary_expression: IDENTIFIER
<printf>
postfix_expression: primary_expression
Start of  the string
primary_expression: STRING_LITERAL
<"C PROGRAMMING %d
//">
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
argument_expression_list: assignment_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
argument_expression_list: argument_expression_list ',' assignment_expression
postfix_expression: postfix_expression '(' argument_expression_list ')'
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement
compound_statement: '{' statement_list '}'
statement: compound_statement
primary_expression: IDENTIFIER
<r>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: ADD_ASSIGN
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement
compound_statement: '{' statement_list '}'
statement: compound_statement
selection_statement: IF '(' expression ')' statement ELSE statement
statement: selection_statement
statement_list: statement_list statement
primary_expression: IDENTIFIER
<z>
postfix_expression: primary_expression
unary_expression: postfix_expression
assignment_operator: '='
primary_expression: IDENTIFIER
<myfunc>
postfix_expression: primary_expression
primary_expression: IDENTIFIER
<h>
postfix_expression: primary_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
postfix_expression: postfix_expression '[' expression ']'	
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
argument_expression_list: assignment_expression
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
argument_expression_list: argument_expression_list ',' assignment_expression
postfix_expression: postfix_expression '(' argument_expression_list ')'
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
assignment_expression: unary_expression assignment_operator assignment_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
statement_list: statement_list statement
primary_expression : CONSTANT
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression	
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression	
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
jump_statement: RETURN expression ';'
statement: jump_statement
statement_list: statement_list statement
compound_statement: '{' declaration_list statement_list '}'
function_definition : declaration_specifiers declarator compound_statement
external_declaration: function_definition
translation_unit: external_declaration

Tabla de variables globales
Name
r VAR
g VAR
@0 CONST
h VAR
printf FUNC
myfunc FUNC
main FUNC

Codigo intermedio: 

0: PROC myfunc
1: @1 = a * b
2: RETURN @1
3: ENDPROC myfunc
4: PROC main
5: x = 0.100000
6: @5 = 1.500000 / 3
7: y = @5
8: @8 = 3 + 2
9: z = @8
10: @10 = z + 3
11: g = @10
12: @11 = z
13: z = z + 1
14: g = @11
15: z = z - 1
16: g = z
17: g = 4
18: @15 = 3 * 4
19: @17 = @15 / 2
20: @18 = x - @17
21: r = @18
22: @20 = y * 2.500000
23: y = @20
24: IF r > 3 GOTO 26
25: GOTO 30
26: PARAM 5
27: PARAM @22
28: @24 = CALL printf, 2
29: GOTO 32
30: @26 = r + 5
31: r = @26
32: @29 = 1 * 4
33: @30 = h[@29]
34: PARAM 5
35: PARAM @30
36: @32 = CALL myfunc, 2
37: z = @32
38: RETURN 0
39: ENDPROC main

luisnunez.@MacBook-Air-de-Luis Compilador % 
